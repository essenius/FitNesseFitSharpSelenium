This example shows how you can test a !-JavaScript-! function much in the same way you would test an API. 
It is a dynamic decision table, implying that the headers are variable.
The names of the input parameters are only relevant for documentation; they are not actually used. The order is important.
You can test two or more functions at the same time if they have the same inputs.

!|JavaScript Function                                                                          |
|#Description                                  |value|Fibonacci?                   |isNoNumber?|
|Can't calculate Fibonacci of a negative number|-1   |Input should be 0 or positive|false      |
|Fibonacci(0) = 0 by definition                |0    |0                            |false      |
|Fibonacci(1) = 1 by definition                |1    |1                            |false      |
|Fibonacci(2) = 1                              |2    |1                            |false      |
|Fibonacci(3) = 2                              |3    |2                            |false      |
|Verify value for an argument between 4 and 46 |10   |55                           |false      |
|Largest response that fits in an int32        |47   |2971215073                   |false      |
|So this one is too large                      |48   |Overflow                     |false      |
|non-numeric value                             |aq   |Input should be numerical    |true       |
|empty value                                   |     |Input should be numerical    |true       |

!|JavaScript Function                    |
|value1|value2|value3|Math.max?|Math.min?|
|1     |10    |100   |$max=    |1        |
|-1    |-10   |-100  |-1       |$min=    |
|$min  |0     |$max  |100      |-100     |
|$min  |a     |$max  |null     |null     |

this last one fails in IE - seems a parsing bug by the IE driver.

!|JavaScript Function|
|x  |y    |Math.pow? |
|2  |-1   |0.5       |
|2  |0.5  |~=1.4142  |
|2  |0    |1         |
|2  |4    |16        |

